---

   - name: Get current username
     shell: command echo `whoami`
     register: ansible_username     

   - name: Get Temp Directory
     shell: command echo `echo $TMPDIR`com.younglim.hats-ci
     register: ansible_tmpdir     
     
  # python_version is a given variable
   - name: Check if python3 is there
     command: python3 --version
     register: python_version_result
     ignore_errors: true

  #  - name: Python version
  #    debug:
  #    msg: "{{ python_version_result}}"

   - name: Intall/Update python
     apt: name="python{{ '3.7.3' }}-dev" staansbite=present
     when: python_version_result.stdout | replace('Python ', '') is version('3.7', '<') 
     ignore_errors: true


   - name: Install virtualenv
     pip:
       name: virtualenv
       executable: pip3
     become: true

   - name: Check if virtualenv ~/hats folder exists (1/2)
     file:
         path: "~/hats"
         state: "touch"
     ignore_errors: yes

   - name: Check if virtualenv ~/hats folder exists (2/2)
     file:
         path: "~/hats"
         state: "absent"

   - name: Create Virtual Env
     shell: bash -lc "virtualenv ~/hats && source ~/hats/bin/activate"

  # functools is included in python 3 now
  #  - name: Install functools for avoiding pip bug
  #    shell: bash -lc "source ~/hats/bin/activate && easy_install functools"

   - name: Install dependencies for Mac in Virtual Env 
     pip: 
        name: "{{item}}"
        virtualenv: ~/hats
        #executable: pip3
     with_items:
      - pyobjc-core
      - pyobjc
      - pyautogui


   - name: Install requirements for Python pip   
     pip:
        requirements: "https://raw.githubusercontent.com/younglim/hats-ci/master/install-list/pip-install-list.txt"
        virtualenv: ~/hats

   - name: Install Google Chrome and Firefox with Brew Cask
     homebrew_cask: 
        name: "{{ item }}"
        state: present
     with_items:
       - google-chrome
       - firefox
       - chrome-devtools
     ignore_errors: true

   - name: Launch Firefox to start pref file
     shell: open -a Firefox 'http://www.google.com/'
    
   - name: Close Firefox after start pref file
     shell: pkill -f firefox

   - name: List firefox default profile folder (Firefox Config) 
     command: ls -v "~/Library/Application Support/Firefox/Profiles/"
     register: firefox_default_profile

   - name: Create Firefox Config if it does not exist
     file: path="~/Library/Application Support/Firefox/Profiles/{{ firefox_default_profile.stdout_lines[0] }}/prefs.js" state="touch"
      
   - name: Insert update disabled (Firefox Config)
     lineinfile: 
        dest: "~/Library/Application Support/Firefox/Profiles/{{ firefox_default_profile.stdout_lines[0] }}/prefs.js"
        insertbefore: '^user_pref*'
        line: 'user_pref("app.update.enabled", false);' 
        state: present
    
   - name: Insert no update (Firefox Config)
     lineinfile: 
        dest: "~/Library/Application Support/Firefox/Profiles/{{ firefox_default_profile.stdout_lines[0] }}/prefs.js"
        insertbefore: '^user_pref*'
        line: 'user_pref("app.update.auto", false);'
        state: present

   - name: Insert no elevate update (Firefox Config)
     lineinfile: 
        dest: "~/Library/Application Support/Firefox/Profiles/{{ firefox_default_profile.stdout_lines[0] }}/prefs.js"
        insertbefore: '^user_pref*'
        line: 'user_pref("app.update.elevate.attempts", 0);'
        state: present

   - name: Create ~/hats/hats_shell
     file: path="~/hats/hats_shell" state=touch mode=a+x

   - name: Add to hats_shell activate virtual env
     lineinfile: dest="~/hats/hats_shell" line='. ~/hats/bin/activate' state=present

   - name: Add ~/.bash_profile if not present
     file: path=~/.bash_profile state=touch

   - name: Add to .bash_profile hats_shell
     lineinfile: dest="~/.bash_profile" line='. ~/hats/hats_shell' state=present

   - name: Set hats_shell "#!/bin/bash"
     lineinfile: dest="~/hats/hats_shell" line="#!/bin/bash" insertbefore=BOF state=present

   - name: Set hats_shell to execute commands at the end (1/2)
     lineinfile: dest="~/hats/hats_shell" line="eval $@" state=absent
     
   - name: Set hats_shell to execute commands at the end (2/2)
     lineinfile: dest="~/hats/hats_shell" line="eval $@" insertafter=EOF state=present

   - name: Add warning file to inform user ~/hats folder is temporary
     file: path="~/hats/ FOLDER WILL BE DELETED UPON UPDATE" state=touch

   - name: Install coreutils
     homebrew: 
        name: "coreutils"
        state: present
     ignore_errors: true
